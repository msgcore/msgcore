services:
  postgres:
    image: postgres:16-alpine
    container_name: msgcore-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-msgcore}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-msgcore_password}
      POSTGRES_DB: ${DB_NAME:-msgcore}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - msgcore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-msgcore}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: msgcore-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - msgcore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    image: msgcore/msgcore:${MSGCORE_VERSION:-latest}
    container_name: msgcore-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MSGCORE_API_URL: ${MSGCORE_API_URL:-http://localhost:7890}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:7890}
      DATABASE_URL: postgresql://${DB_USER:-msgcore}:${DB_PASSWORD:-msgcore_password}@postgres:5432/${DB_NAME:-msgcore}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    ports:
      - "7890:7890"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - msgcore-network

networks:
  msgcore-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: