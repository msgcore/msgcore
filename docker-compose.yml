services:
  postgres:
    image: postgres:16-alpine
    container_name: msgcore-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-msgcore}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-msgcore_password}
      POSTGRES_DB: ${DB_NAME:-msgcore}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - msgcore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-msgcore}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: msgcore-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - msgcore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: msgcore-app
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      DATABASE_URL: postgresql://${DB_USER:-msgcore}:${DB_PASSWORD:-msgcore_password}@postgres:5432/${DB_NAME:-msgcore}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./src:/usr/src/app/src
      - ./prisma:/usr/src/app/prisma
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - msgcore-network
    command: >
      sh -c "
        if [ \"$${NODE_ENV}\" = \"development\" ]; then
          npm run start:dev
        else
          node dist/main
        fi
      "

networks:
  msgcore-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: